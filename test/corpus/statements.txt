==============================
If statements
==============================

<?php

if ($a > 0) {
  echo "Yes";
}

if ($a==0) {
  echo "bad";
} else {
  echo "good";
}

if ($a==0) {
  echo "bad";
} elseif ($a==3) {
  echo "bad";
} else {
  echo "good";
}

---

(program
  (if_statement
    (binary_expression (variable_name (name)) (integer))
    (compound_statement (echo_statement (string))))
  (if_statement
    (binary_expression (variable_name (name)) (integer))
    (compound_statement (echo_statement (string)))
    (else_clause (compound_statement (echo_statement (string)))))
  (if_statement
    (binary_expression (variable_name (name)) (integer))
    (compound_statement (echo_statement (string)))
    (else_if_clause
      (binary_expression (variable_name (name)) (integer))
      (compound_statement (echo_statement (string))))
    (else_clause
      (compound_statement (echo_statement (string))))))

==============================
Alternative if statements
==============================

<?php

if ($a) echo 1; else echo 0;
if ($a):
  echo 1;
else:
  echo 0;
endif;

---

(program
  (if_statement
    (variable_name (name))
    (echo_statement (integer))
    (else_clause (echo_statement (integer))))
  (if_statement
    (variable_name (name))
    (echo_statement (integer))
    (else_clause (echo_statement (integer)))))

==============================
While statements
==============================

<?php
while ($a < 10) {
  echo $a;
  $a++;
}

---

(program
  (while_statement
    (binary_expression (variable_name (name)) (integer))
    (compound_statement
      (echo_statement (variable_name (name)))
      (expression_statement (update_expression (variable_name (name)))))))

==============================
Alternative while statements
==============================

<?php

while ($a<5) echo $a++;
while ($a<9):
  echo ++$a;
endwhile;

---

(program
  (while_statement
    (binary_expression (variable_name (name)) (integer))
    (echo_statement (update_expression (variable_name (name)))))
  (while_statement
    (binary_expression (variable_name (name)) (integer))
    (echo_statement (update_expression (variable_name (name))))))

==============================
For statements
==============================

<?php

for($a=0;$a<5;$a++) echo $a;
for($a=0;$a<5;$a++):
  echo $a;
endfor;

---

(program
  (for_statement
    (assignment_expression (variable_name (name)) (integer))
    (binary_expression (variable_name (name)) (integer))
    (update_expression (variable_name (name)))
    (echo_statement (variable_name (name))))
  (for_statement
    (assignment_expression (variable_name (name)) (integer))
    (binary_expression (variable_name (name)) (integer))
    (update_expression (variable_name (name)))
    (echo_statement (variable_name (name)))))

==============================
Switch statements
==============================

<?php
switch ($a) {
  case 0:
  echo "bad";
  break;
  case 1:
  echo "good";
  break;
  default:
  echo "bad";
  break;
}
?>

---

(program
  (switch_statement
    (variable_name (name))
    (case_statement (integer) (echo_statement (string)) (break_statement))
    (case_statement (integer) (echo_statement (string)) (break_statement))
    (default_statement (echo_statement (string)) (break_statement))))

==============================
Alternative switch statements
==============================

<?php

switch ($a):
  case 0;
  echo 0;
  break;
  case 5:
  echo 1;
  break;
  default;
  echo 0;
  break;
endswitch;
?>

---

(program
  (switch_statement
    (variable_name (name))
    (case_statement (integer) (echo_statement (integer)) (break_statement))
    (case_statement (integer) (echo_statement (integer)) (break_statement))
    (default_statement (echo_statement (integer)) (break_statement))))

==============================
Include statement
==============================

<?php
include "015.inc";
?>

---

(program (expression_statement (include_expression (string))))

==============================
Do-while statements
==============================

<?php
do {
  echo $i;
  $i--;
} while($i>0);
?>

---

(program
  (do_statement
    (compound_statement (echo_statement (variable_name (name))) (expression_statement (update_expression (variable_name (name)))))
    (binary_expression (variable_name (name)) (integer))))

==============================
Try statements
==============================

<?php

try {
} catch (MyException $exception) {
} catch (OtherException $e) {
} finally {
}

try {
  ThrowException();
} catch (MyException $exception) {
  print "There was an exception: " . $exception->getException();
  print "\n";
}
?>

---

(program
  (try_statement
    body: (compound_statement)
    (catch_clause
      type: (type_name (name))
      name: (variable_name (name))
      body: (compound_statement))
    (catch_clause
      type: (type_name (name))
      name: (variable_name (name))
      body: (compound_statement))
    (finally_clause
      body: (compound_statement)))
  (try_statement
    body: (compound_statement
      (expression_statement (function_call_expression (qualified_name (name)) (arguments))))
    (catch_clause
      type: (type_name (name))
      name: (variable_name (name))
      body: (compound_statement
        (expression_statement (print_intrinsic (binary_expression
          (string) (member_call_expression (variable_name (name)) (name) (arguments)))))
        (expression_statement (print_intrinsic (string)))))))

==============================
Foreach statements
==============================

<?php
foreach ($a as $b[0]) {
  echo $b[0]."\n";
}

foreach($arr as $key => $value);

---

(program
  (foreach_statement
    (variable_name (name))
    (subscript_expression (variable_name (name)) (integer))
    (compound_statement
      (echo_statement (binary_expression
        (subscript_expression (variable_name (name)) (integer))
        (string)))))
  (foreach_statement
    (variable_name (name))
    (pair (variable_name (name)) (variable_name (name)))))

================================
Throw statements
================================

<?php
throw new Exception(__METHOD__);

---

(program
  (throw_statement
    (object_creation_expression
      (qualified_name (name))
      (arguments (qualified_name (name))))))
